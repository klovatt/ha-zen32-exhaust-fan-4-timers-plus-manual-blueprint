blueprint:
  name: Zooz ZEN32 Fan Scene Controller - 4 Timers plus manual
  description: Treats the buttons as 1/6, 1/3, 1/2, 1/1 of maximum on duration to control a fan. e.g. 10m, 20m, 30m, and 60m or 5m, 10m, 15m, and 30m
  domain: automation
  input:
    scene_controller:
      name: Zooz ZEN32 Scene Controller
      description: The Zooz Zen32 Scene Controller that will controll the fan's state
      selector:
        device:
          filter:
            - integration: zwave_js
              manufacturer: Zooz
              model: ZEN32
            - integration: zwave_js
              manufacturer: Zooz
              model: ZEN32 800LR
          multiple: false
    relay_led_control:
      name: Relay LED Control Entity
      description: Entity to use for controlling relay LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    relay_led_color_control:
      name: Relay LED Colour Control Entity
      description: Entity to use for controlling colour of relay LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    button1_led_control:
      name: Button 1 LED Control Entity
      description: Entity to use for controlling Button 1 LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    button2_led_control:
      name: Button 2 LED Control Entity
      description: Entity to use for controlling Button 2 LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    button3_led_control:
      name: Button 3 LED Control Entity
      description: Entity to use for controlling Button 3 LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    button4_led_control:
      name: Button 4 LED Control Entity
      description: Entity to use for controlling Button 4 LED
      selector:
        entity:
          domain:
          - select
          multiple: false
    fan_entity:
      name: Fan Entity
      description: Fan Entity to toggle the exhause fan
      selector:
        entity:
          domain:
          - fan
          multiple: false
    virtual_button1:
      name: Virtual Button 1 Entity
      description: Entity for virtual Button 1
      selector:
        entity:
          domain:
          - input_button
          multiple: false
    virtual_button2:
      name: Virtual Button 2 Entity
      description: Entity for virtual Button 2
      selector:
        entity:
          domain:
          - input_button
          multiple: false
    virtual_button3:
      name: Virtual Button 3 Entity
      description: Entity for virtual Button 3
      selector:
        entity:
          domain:
          - input_button
          multiple: false
    virtual_button4:
      name: Virtual Button 4 Entity
      description: Entity for virtual Button 4
      selector:
        entity:
          domain:
          - input_button
          multiple: false
    fan_timer:
      name: Fan Timer Entity
      description: The helper timer associated with the fan.
      selector:
        entity:
          domain:
          - timer
          multiple: false
    max_duration:
      name: Maximum fan-on duration
      description: The maximum length of time the fan will run (30/60 minutes, default 30)
      default: 30
      selector:
        number:
          min: 1
          max: 60
          step: 1
          unit_of_measurement: minutes
    log_level:
      name: Detail Level for logging
      description: What level of detil will appear in homeassistant.log
      default: warning
      selector:
        select:
          options:
            - error
            - warning
            - info
            - debug
  source_url: https://github.com/klovatt/ha-zen32-exhaust-fan-4-timers-plus-manual-blueprint/blob/main/zen32_exhaust_fan.yaml


variables:
  scene_controller: !input scene_controller
  relay_led_control: !input relay_led_control
  relay_led_color_control: !input relay_led_color_control
  button1_led_control: !input button1_led_control
  button2_led_control: !input button2_led_control
  button3_led_control: !input button3_led_control
  button4_led_control: !input button4_led_control
  fan_entity: !input fan_entity
  virtual_button1: !input virtual_button1
  virtual_button2: !input virtual_button2
  virtual_button3: !input virtual_button3
  virtual_button4: !input virtual_button4
  fan_timer: !input fan_timer
  max_duration: !input max_duration
  button1_duration: "{{ ( (max_duration | int) / 6 * 60 )| int }}"
  button2_duration: "{{ ( (max_duration | int) / 3 * 60 )| int }}"
  button3_duration: "{{ ( (max_duration | int) / 2 * 60 )| int }}"
  button4_duration: "{{ ( (max_duration | int) * 60 )| int }}"
  log_level: !input log_level


trigger:
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input scene_controller
    property: scene
    property_key: '001'
    value: KeyPressed
  id: button1_pressed

- platform: state
  entity_id: !input virtual_button1
  id: button1_pressed

- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input scene_controller
    property: scene
    property_key: '002'
    value: KeyPressed
  id: button2_pressed

- platform: state
  entity_id: !input virtual_button2
  id: button2_pressed

- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input scene_controller
    property: scene
    property_key: '003'
    value: KeyPressed
  id: button3_pressed

- platform: state
  entity_id: !input virtual_button3
  id: button3_pressed

- platform: event
  event_type: zwave_js_value_notification
  event_data:
    device_id: !input scene_controller
    property: scene
    property_key: '004'
    value: KeyPressed
  id: button4_pressed

- platform: state
  entity_id: !input virtual_button4
  id: button4_pressed

- platform: state
  entity_id: !input fan_timer
  to: 'idle'
  id: timer_idle

#- platform: state
#  entity_id: !input fan_timer
#  to: 'active'
#  id: timer_active

- platform: device
  type: turned_off
  device_id: !input scene_controller
  entity_id: !input fan_entity
  id: turned_off
  domain: fan

- platform: device
  type: turned_on
  device_id: !input scene_controller
  entity_id: !input fan_entity
  id: turned_on
  domain: fan

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: CALCULATE_TIMER_BUTTON
  id: state_CALCULATE_TIMER_BUTTON

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: 'IS_OFF'
  id: state_IS_OFF

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: 'TURN_OFF'
  id: state_TURN_OFF

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: ON_NO_TIME
  id: state_ON_NO_TIME

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: BUTTON4
  id: state_BUTTON4

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: BUTTON3
  id: state_BUTTON3

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: BUTTON2
  id: state_BUTTON2

- platform: event
  event_type: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
  event_data:
    scene_controller: !input scene_controller
    fan_entity: !input fan_entity
    fan_timer: !input fan_timer
    new_state: BUTTON1
  id: state_BUTTON1


action:
- service: logger.set_level
  data:
    zen32_exhaust_fan_blueprint: "{{ log_level }}"
- if:
  - condition: template
    value_template: '{{ trigger.platform == ''event'' and trigger.event.event_type
      == ''ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE'' }}'
  then:
  - service: system_log.write
    data_template:
      level: debug
      logger: zen32_exhaust_fan_blueprint
      message: 'Entered state {{ trigger.event.data.new_state }} for {{ fan_entity
        }} with scene controller {{ scene_controller }}.'

- choose:
  - conditions:
    - condition: trigger
      id: state_CALCULATE_TIMER_BUTTON
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_CALCULATE_TIMER_BUTTON is calculating which button to use for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - choose:
      - conditions:
        - condition: template
          value_template: '{% set remaining = timedelta(seconds=(as_timestamp(state_attr(fan_timer,
            ''finishes_at'')) - as_timestamp(now())) | int) %}{{ remaining > timedelta(seconds=button3_duration)
            }}'
        sequence:
        - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
          event_data:
            scene_controller: !input scene_controller
            fan_entity: !input fan_entity
            fan_timer: !input fan_timer
            new_state: BUTTON4

      - conditions:
        - condition: template
          value_template: '{% set remaining = timedelta(seconds=(as_timestamp(state_attr(fan_timer,
            ''finishes_at'')) - as_timestamp(now())) | int) %}{{ remaining > timedelta(seconds=button2_duration)
            and remaining <= timedelta(seconds=button3_duration) }}'
        sequence:
        - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
          event_data:
            scene_controller: !input scene_controller
            fan_entity: !input fan_entity
            fan_timer: !input fan_timer
            new_state: BUTTON3

      - conditions:
        - condition: template
          value_template: '{% set remaining = timedelta(seconds=(as_timestamp(state_attr(fan_timer,
            ''finishes_at'')) - as_timestamp(now())) | int) %}{{ remaining > timedelta(seconds=button1_duration)
            and remaining <= timedelta(seconds=button2_duration) }}'
        sequence:
        - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
          event_data:
            scene_controller: !input scene_controller
            fan_entity: !input fan_entity
            fan_timer: !input fan_timer
            new_state: BUTTON2

      - conditions:
        - condition: template
          value_template: '{% set remaining = timedelta(seconds=(as_timestamp(state_attr(fan_timer,
            ''finishes_at'')) - as_timestamp(now())) | int) %}{{ remaining <= timedelta(seconds=button1_duration)
            }}'
        sequence:
        - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
          event_data:
            scene_controller: !input scene_controller
            fan_entity: !input fan_entity
            fan_timer: !input fan_timer
            new_state: BUTTON1

      default:
      - service: system_log.write
        data_template:
          level: error
          logger: zen32_exhaust_fan_blueprint
          message: '"Unable to compute proper state for {{ trigger.id }} for {{ fan_entity
            }} with scene controller {{ scene_controller }}."'

  - conditions:
    - condition: trigger
      id: state_IS_OFF
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_IS_OFF is resetting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: On when load is off
      then:
      - service: select.select_option
        data:
          option: On when load is off
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Blue
      then:
      - service: select.select_option
        data:
          option: Blue
        target:
          entity_id: !input relay_led_color_control
    - if:
      - condition: state
        entity_id: !input fan_timer
        state: active
      then:
      - service: system_log.write
        data_template:
          level: debug
          logger: zen32_exhaust_fan_blueprint
          message: "Trigger State_IS_OFF is cancelling timer for {{ fan_entity }} with scene controller {{ scene_controller }}."
      - service: timer.cancel
        target:
          entity_id: !input fan_timer
        data: {}

  - conditions:
    - condition: trigger
      id: state_TURN_OFF
    sequence:
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'on'
      then:
      - service: system_log.write
        data_template:
          level: debug
          logger: zen32_exhaust_fan_blueprint
          message: "Trigger State_TURN_OFF is turning off switch for {{ fan_entity }} with scene controller {{ scene_controller }}."
      - service: fan.turn_off
        target:
          entity_id: !input fan_entity
        data: {}

  - conditions:
    - condition: trigger
      id: state_ON_NO_TIME
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_ON_NO_TIME is resetting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: Always on
      then:
      - service: select.select_option
        data:
          option: Always on
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Green
      then:
      - service: select.select_option
        data:
          option: Green
        target:
          entity_id: !input relay_led_color_control

  - conditions:
    - condition: trigger
      id: state_BUTTON4
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON4 is setting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: On when load is off
      then:
      - service: select.select_option
        data:
          option: On when load is off
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always on
      then:
      - service: select.select_option
        data:
          option: Always on
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Blue
      then:
      - service: select.select_option
        data:
          option: Blue
        target:
          entity_id: !input relay_led_color_control
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON4 is delaying with timer for {{ button4_duration }} for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - delay:
        seconds: '{{ (as_timestamp(as_datetime(state_attr(fan_timer, ''finishes_at''))
          - timedelta(seconds=button3_duration)) - as_timestamp(now())) | int }}'
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON3

  - conditions:
    - condition: trigger
      id: state_BUTTON3
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON3 is setting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: On when load is off
      then:
      - service: select.select_option
        data:
          option: On when load is off
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always on
      then:
      - service: select.select_option
        data:
          option: Always on
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Blue
      then:
      - service: select.select_option
        data:
          option: Blue
        target:
          entity_id: !input relay_led_color_control
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON3 is delaying with timer for {{ button3_duration }} for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - delay:
        seconds: '{{ (as_timestamp(as_datetime(state_attr(fan_timer, ''finishes_at''))
          - timedelta(seconds=button2_duration)) - as_timestamp(now())) | int }}'
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON2

  - conditions:
    - condition: trigger
      id: state_BUTTON2
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON2 is setting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: On when load is off
      then:
      - service: select.select_option
        data:
          option: On when load is off
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always on
      then:
      - service: select.select_option
        data:
          option: Always on
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Blue
      then:
      - service: select.select_option
        data:
          option: Blue
        target:
          entity_id: !input relay_led_color_control
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON2 is delaying with timer for {{ button2_duration }} for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - delay:
        seconds: '{{ (as_timestamp(as_datetime(state_attr(fan_timer, ''finishes_at''))
          - timedelta(seconds=button1_duration)) - as_timestamp(now())) | int }}'
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON1

  - conditions:
    - condition: trigger
      id: state_BUTTON1
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON1 is setting button lights for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_control
          state: On when load is off
      then:
      - service: select.select_option
        data:
          option: On when load is off
        target:
          entity_id: !input relay_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button1_led_control
          state: Always on
      then:
      - service: select.select_option
        data:
          option: Always on
        target:
          entity_id: !input button1_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button2_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button2_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button3_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button3_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input button4_led_control
          state: Always off
      then:
      - service: select.select_option
        data:
          option: Always off
        target:
          entity_id: !input button4_led_control
    - if:
      - condition: not
        conditions:
        - condition: state
          entity_id: !input relay_led_color_control
          state: Blue
      then:
      - service: select.select_option
        data:
          option: Blue
        target:
          entity_id: !input relay_led_color_control
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Trigger State_BUTTON1 is delaying with timer for {{ button1_duration }} for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - delay:
        seconds: '{{ (as_timestamp(state_attr(fan_timer, ''finishes_at'')) - as_timestamp(now()))
          | int }}'
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Timer expired Button 1 time for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: 'TURN_OFF'

  - conditions:
    - condition: trigger
      id: button4_pressed
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Starting timer for Button 4 duration for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - service: timer.start
      data:
        duration: "{{ button4_duration }}"
      target:
        entity_id: !input fan_timer
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'off'
      then:
      - service: fan.turn_on
        target:
          entity_id: !input fan_entity
        data: {}
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Switching State to BUTTON4 for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON4

  - conditions:
    - condition: trigger
      id: button3_pressed
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Starting timer for Button 3 duration for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - service: timer.start
      data:
        duration: "{{ button3_duration }}"
      target:
        entity_id: !input fan_timer
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'off'
      then:
      - service: fan.turn_on
        target:
          entity_id: !input fan_entity
        data: {}
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Switching State to BUTTON3 for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON3

  - conditions:
    - condition: trigger
      id: button2_pressed
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Starting timer for Button 2 duration for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - service: timer.start
      data:
        duration: "{{ button2_duration }}"
      target:
        entity_id: !input fan_timer
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'off'
      then:
      - service: fan.turn_on
        target:
          entity_id: !input fan_entity
        data: {}
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Switching State to BUTTON2 for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON2

  - conditions:
    - condition: trigger
      id: button1_pressed
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Starting timer for Button 1 duration for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - service: timer.start
      data:
        duration: "{{ button1_duration }}"
      target:
        entity_id: !input fan_timer
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'off'
      then:
      - service: fan.turn_on
        target:
          entity_id: !input fan_entity
        data: {}
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Switching State to BUTTON1 for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: BUTTON1

  - conditions:
    - condition: trigger
      id: timer_active
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Timer active (unknown) for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: CALCULATE_TIMER_BUTTON

#  - conditions:
#    - condition: trigger
#      id: timer_changed
#    sequence:
#    - if:
#      - condition: state
#        entity_id: !input fan_timer
#        state: active
#      then:
#      - service: system_log.write
#        data_template:
#          level: debug
#          logger: zen32_exhaust_fan_blueprint
#          message: "Timer active (unknown) for {{ fan_entity }} with scene controller {{ scene_controller }}."
#      - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
#        event_data:
#          scene_controller: !input scene_controller
#          fan_entity: !input fan_entity
#          fan_timer: !input fan_timer
#          new_state: CALCULATE_TIMER_BUTTON
#    - if:
#      - condition: state
#        entity_id: !input fan_timer
#        state: idle
#      then:
#      - service: system_log.write
#        data_template:
#          level: debug
#          logger: zen32_exhaust_fan_blueprint
#          message: "Timer idle for {{ fan_entity }} with scene controller {{ scene_controller }}."
#      - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
#        event_data:
#          scene_controller: !input scene_controller
#          fan_entity: !input fan_entity
#          fan_timer: !input fan_timer
#          new_state: 'OFF'

  - conditions:
    - condition: trigger
      id: timer_idle
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Timer idle for {{ fan_entity }} with scene controller {{ scene_controller }}."
    - if:
      - condition: state
        entity_id: !input fan_entity
        state: 'on'
      then:
      - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
        event_data:
          scene_controller: !input scene_controller
          fan_entity: !input fan_entity
          fan_timer: !input fan_timer
          new_state: 'TURN_OFF'

  - conditions:
    - condition: trigger
      id: turned_off
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Switch reports device turned OFF for {{ fan_entity }} with scene controller {{ scene_controller }}.."
    - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
      event_data:
        scene_controller: !input scene_controller
        fan_entity: !input fan_entity
        fan_timer: !input fan_timer
        new_state: 'IS_OFF'

  - conditions:
    - condition: trigger
      id: turned_on
    sequence:
    - service: system_log.write
      data_template:
        level: debug
        logger: zen32_exhaust_fan_blueprint
        message: "Reached trigger turned_on for {{ fan_entity }} with scene controller {{ scene_controller }}.."
    - if:
      - condition: state
        entity_id: !input fan_timer
        state: idle
      then:
      - service: system_log.write
        data_template:
          level: debug
          logger: zen32_exhaust_fan_blueprint
          message: "Switch reports device turned ON without timer for {{ fan_entity }} with scene controller {{ scene_controller }}.."
      - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
        event_data:
          scene_controller: !input scene_controller
          fan_entity: !input fan_entity
          fan_timer: !input fan_timer
          new_state: ON_NO_TIME
    - if:
      - condition: state
        entity_id: !input fan_timer
        state: active
      then:
      - event: ZEN32_EXHAUST_FAN_BLUEPRINT_STATE_CHANGE
        event_data:
          scene_controller: !input scene_controller
          fan_entity: !input fan_entity
          fan_timer: !input fan_timer
          new_state: CALCULATE_TIMER_BUTTON

  default:
  - service: system_log.write
    data_template:
      level: error
      logger: zen32_exhaust_fan_blueprint
      message: '"Unexpected default for trigger {{ trigger.id }} for {{ fan_entity
        }} with scene controller {{ scene_controller }}."'

mode: restart
